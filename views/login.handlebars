<html>

<head>
  <title>Boilerplate</title>  
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" type="text/css" href="css/bootstrap.css">
  <link rel="stylesheet" type="text/css" href="css/bootstrap-theme.css">
  <script src="https://code.jquery.com/jquery.js"></script>
  <script src="js/bootstrap.js"></script>

</head>

<body>
  <script>(function(d, s, id) {
    var js, fjs = d.getElementsByTagName(s)[0];
    if (d.getElementById(id)) return;
    js = d.createElement(s); js.id = id;
    js.src = "//connect.facebook.net/en_US/all.js#xfbml=1&appId=486420108124872";
    fjs.parentNode.insertBefore(js, fjs);
    }(document, 'script', 'facebook-jssdk'));
  </script>

  <script>
    window.fbAsyncInit = function() {
    FB.init({
      appId      : '486420108124872',
      status     : true, // check login status
      cookie     : true, // enable cookies to allow the server to access the session
      xfbml      : true  // parse XFBML
    });

    // Here we subscribe to the auth.authResponseChange JavaScript event. This event is fired
    // for any authentication related change, such as login, logout or session refresh. This means that
    // whenever someone who was previously logged out tries to log in again, the correct case below 
    // will be handled. 

    FB.getLoginStatus(function(response) {
      if (response.status === 'connected') {
        // the user is logged in and has authenticated your
        // app, and response.authResponse supplies
        // the user's ID, a valid access token, a signed
        // request, and the time the access token 
        // and signed request each expire
        var uid = response.authResponse.userID;
        var accessToken = response.authResponse.accessToken;
      } else if (response.status === 'not_authorized') {
        // the user is logged in to Facebook, 
        // but has not authenticated your app
      } else {
        // the user isn't logged in to Facebook.
      }
    });

    FB.Event.subscribe('auth.authResponseChange', function(response) {
      // Here we specify what we do with the response anytime this event occurs. 
      if (response.status === 'connected') {
        // The response object is returned with a status field that lets the app know the current
        // login status of the person. In this case, we're handling the situation where they 
        // have logged in to the app.
        testAPI();
      } else if (response.status === 'not_authorized') {
        // In this case, the person is logged into Facebook, but not into the app, so we call
        // FB.login() to prompt them to do so. 
        // In real-life usage, you wouldn't want to immediately prompt someone to login 
        // like this, for two reasons:
        // (1) JavaScript created popup windows are blocked by most browsers unless they 
        // result from direct interaction from people using the app (such as a mouse click)
        // (2) it is a bad experience to be continually prompted to login upon page load.
        FB.login();
      } else {
        // In this case, the person is not logged into Facebook, so we call the login() 
        // function to prompt them to do so. Note that at this stage there is no indication
        // of whether they are logged into the app. If they aren't then they'll see the Login
        // dialog right after they log in to Facebook. 
        // The same caveats as above apply to the FB.login() call here.
        FB.login();
      }
    });

    /* make the API call */
    FB.api(
        "/me",
        function (response) {
          if (response && !response.error) {
            /* handle the result */
          }
        }
    );
    };

    // Load the SDK asynchronously
    (function(d){
     var js, id = 'facebook-jssdk', ref = d.getElementsByTagName('script')[0];
     if (d.getElementById(id)) {return;}
     js = d.createElement('script'); js.id = id; js.async = true;
     js.src = "//connect.facebook.net/en_US/all.js";
     ref.parentNode.insertBefore(js, ref);
    }(document));

    // Here we run a very simple test of the Graph API after login is successful. 
    // This testAPI() function is only called in those cases. 
    // function testAPI() {
    //   console.log('Welcome!  Fetching your information.... ');
    //   FB.api('/me', function(response) {
    //     console.log('Good to see you, ' + response.name + '.');
    //   });
    // }
    function testAPI() {
      console.log('Welcome!  Fetching your information.... ');
      FB.api(
        {
            method: 'fql.query',
            // query: 'SELECT uid, first_name, last_name FROM user WHERE uid = 1036381129'
            query: 'SELECT uid, name FROM user WHERE uid IN (SELECT uid2 FROM friend WHERE uid1 = me())'
        },
        function(data) {
            var friends = data; 
            // console.log(friends); 
            window.friends = friends; 
            var index1 = Math.floor(Math.random()*friends.length)+1;
            var index2 = Math.floor(Math.random()*friends.length)+1;
            var index3 = Math.floor(Math.random()*friends.length)+1;
            var index4 = Math.floor(Math.random()*friends.length)+1;
            var index5 = Math.floor(Math.random()*friends.length)+1; 
            // console.log("index1 is", index1);
            window.friend1 = friends[index1]
            friend2 = friends[index2]
            friend3 = friends[index3]
            friend4 = friends[index4]
            friend5 = friends[index5]
            console.log(friend1, friend2, friend3, friend4, friend5);

            window.tesFriends = []; 
            tesFriends.push(friend1)
            tesFriends.push(friend2)
            tesFriends.push(friend3)
            tesFriends.push(friend4)
            tesFriends.push(friend5)

            insertFriends(tesFriends); 

            // insert html.   

              //window.insertFriendsScript = $("#insertFriends").html();  
           //  console.log(insertFriendsScript);
        }
    );
    }
  </script>
  
<script>
  // here we'll GET all the data we want from the 5 friends based on their uid
  function getPhoto(userID){
      var url = '/' + userID + '/picture?type=normal';
      console.log(url);
      var picHtml = FB.api(url, function(response){
        var picHtml="<img src='"+response.data.url+"'/>";
        console.log("the value about to returned:", picHtml)
        return picHtml;
        // $("#tesselate").append(pic);
      })
      console.log("pic html from in getPhoto()", picHtml);
      return picHtml;
  }

</script>

<script>
  function insertFriends(friends){
    // console.log("how about this?");
    // console.log(data);
    
    for( var i = 0; i<friends.length; i++){
      var friend = friends[i];
      var nameHtml = '<li><h3> <a href="http://facebook.com/profile.php?id=' +
              friend.uid + '">' + 
              friend.name + 
              '</a></h3></li>'; 
      
      
      // picHtml = getPhoto(friend.uid); 
      // namePic = nameHtml + picHtml; 
      $("#tesselate").append(nameHtml);
    }
  } 
</script>

<!--
  Below we include the Login Button social plugin. This button uses the JavaScript SDK to
  present a graphical Login button that triggers the FB.login() function when clicked. -->
  <div class="container">
     <fb:login-button show-faces="true" width="200" max-rows="1"></fb:login-button>
      <div id="fb-root"></div>
      <br>
      <div class="fb-like" data-href="https://developers.facebook.com/docs/plugins/" data-layout="button_count" data-action="like" data-show-faces="true" data-share="true"></div>   
  </div>
 


  <div class="containter" >
    <!-- friends will be inserted here -->
    <div class="jumbotron">
      <h2> Here are 5 of your friends to catch up with!</h2>
      <h3> Click their name to see what they're up to :)</h3>
    </div>
    <ul id="tesselate">
      
    </ul>
  </div>




  <!-- // <script src="https://code.jquery.com/jquery.js"></script> -->
  <!-- // <script src="js/bootstrap.js"></script> -->

</body>
</html>